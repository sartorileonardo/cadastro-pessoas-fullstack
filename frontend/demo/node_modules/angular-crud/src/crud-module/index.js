"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const JSON5 = require("json5");
const crudModelUtils = require("../utils/crud-model-utils");
const config_1 = require("@schematics/angular/utility/config");
const parse_name_1 = require("@schematics/angular/utility/parse-name");
const schematics_utilities_1 = require("schematics-utilities");
const strings_1 = require("@angular-devkit/core/src/utils/strings");
function setupOptions(options, host) {
    const workspace = config_1.getWorkspace(host);
    if (!options.project) {
        options.project = Object.keys(workspace.projects)[0];
    }
    const project = workspace.projects[options.project];
    if (options.path === undefined) {
        const projectDirName = project.projectType === 'application' ? 'app' : 'lib';
        options.path = `/${project.root}/src/${projectDirName}`;
    }
    const parsedPath = parse_name_1.parseName(options.path, options.name);
    options.name = parsedPath.name;
    options.path = parsedPath.path;
}
function default_1(options) {
    return (host, context) => {
        setupOptions(options, host);
        options.module = schematics_utilities_1.findModuleFromOptions(host, options) || '';
        const modelFile = `${options.path}/${options.name}/${options.model}`;
        const modelBuffer = host.read(modelFile);
        if (modelBuffer === null) {
            throw new schematics_1.SchematicsException(`Model file ${options.model} does not exist.`);
        }
        const modelJson = modelBuffer.toString('utf-8');
        const model = JSON5.parse(modelJson);
        // add imports to app.module.ts
        schematics_utilities_1.addModuleImportToModule(host, `${options.path}/app.module.ts`, `${strings_1.capitalize(model.entity)}Module`, `./${options.name}/${model.entity}.module`);
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign(Object.assign(Object.assign(Object.assign({}, core_1.strings), options), crudModelUtils), { model })),
            schematics_1.move(`${options.path}/${options.name}` || ''),
            // fix for https://github.com/angular/angular-cli/issues/11337
            schematics_1.forEach((fileEntry) => {
                if (host.exists(fileEntry.path)) {
                    host.overwrite(fileEntry.path, fileEntry.content);
                }
                return fileEntry;
            }),
        ]);
        const rule = schematics_1.chain([
            schematics_1.branchAndMerge(schematics_1.chain([
                schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Overwrite)
            ])),
        ]);
        return rule(host, context);
    };
}
exports.default = default_1;
//# sourceMappingURL=index.js.map